using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using System.Reflection;
using Microsoft.Data.Sqlite;

namespace Project.Data
{
    public class ApplicationDBContext : DbContext
    {
        public DbSet<Highschool> HighSchool { get; set; }
        public DbSet<Student> Student { get; set; }
        public DbSet<Specialization> Specialization { get; set; }
        public DbSet<Applicationn> Applicationn { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder options)
        {
            options.UseSqlite($"Data Source=myDB.db;");
        }

        public void PopulateTestData()
        {
            using (ApplicationDBContext db = new ApplicationDBContext())
            {
                for (int i = 0; i < 15; i++)
                {
                    db.Add(new Highschool
                    {
                        Name = "Highschool " + i,
                        Address = "Address " + i,
                        Phone_Number = "123456789",
                        Email = "Email" + i + "@example.com",
                        City = "City" + i
                    });
                }

                // Adding Students
                for (int i = 0; i < 15; i++)
                {
                    db.Add(new Student
                    {
                        First_Name = "First" + i,
                        Last_Name = "Last" + i,
                        Personal_Identification_Number = "PID" + i,
                        Birth_Place = "Place" + i,
                        Birth_Date = DateTime.Now.AddYears(-20).AddDays(i * 365),
                        Address = "Address " + i
                    });
                }

                db.SaveChanges();

                // Adding Specializations
                for (int i = 0; i < 15; i++)
                {
                    db.Add(new Specialization
                    {
                        Id_School = i + 1,
                        Name = "Specialization " + i,
                        Description = "Description " + i,
                        Number_Of_Available_Positions = 10 + i,
                        Duration_Of_Specialization = 4,
                        Language = "Language" + i,
                        Form_Of_Study = "Form " + i
                    });
                }

                db.SaveChanges();

                // Adding Applications
                for (int i = 0; i < 15; i++)
                {
                    db.Add(new Applicationn
                    {
                        Id_School = i + 1,
                        Id_Specialization_1 = 15 - i,
                        Id_Student = i + 1
                    });
                }

                db.SaveChanges();
            }
        }

        public void PrintTables()
        {
            using (ApplicationDBContext db = new ApplicationDBContext())
            {
                var highschools = db.HighSchool.ToList();
                var students = db.Student.ToList();
                var applications = db.Applicationn.ToList();
                var specializations = db.Specialization.ToList();

                Console.WriteLine("Highschools:");
                foreach (var highschool in highschools)
                {
                    Console.WriteLine($"ID: {highschool.Id_School} - Name: {highschool.Name}, Address: {highschool.Address}, City: {highschool.City}");
                }

                Console.WriteLine("Students:");
                foreach (var student in students)
                {
                    Console.WriteLine($"ID: {student.Id_Student} - First Name: {student.First_Name}, Last Name: {student.Last_Name}, PID: {student.Personal_Identification_Number}");
                }

                Console.WriteLine("Applications:");
                foreach (var application in applications)
                {
                    Console.WriteLine($"ID: {application.Id_Applications} - Id Specialization 1: {application.Id_Specialization_1}, Id Student: {application.Id_Student}");
                }

                Console.WriteLine("Specializations:");
                foreach (var specialization in specializations)
                {
                    Console.WriteLine($"ID: {specialization.Id_Specialization} - Name: {specialization.Name}, Description: {specialization.Description}, Number of Available Positions: {specialization.Number_Of_Available_Positions}");
                }
            }
        }

        public bool WipeDatabase()
        {
            using (ApplicationDBContext db = new ApplicationDBContext())
            {
                db.Database.EnsureDeleted();
                return db.Database.EnsureCreated();
            }
        }
    }
}
